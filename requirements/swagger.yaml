basePath: /
definitions:
  dto.AddToCartRequest:
    properties:
      menu_id:
        type: string
      quantity:
        type: integer
    required:
    - menu_id
    - quantity
    type: object
  dto.ChangePasswordRequest:
    properties:
      current_password:
        type: string
      new_password:
        type: string
    required:
    - current_password
    - new_password
    type: object
  dto.CreateMenuRequest:
    properties:
      category:
        maxLength: 100
        minLength: 2
        type: string
      description:
        type: string
      image_url:
        type: string
      name:
        maxLength: 255
        minLength: 2
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - name
    - price
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        description: Role is optional, defaults to customer
        enum:
        - admin
        - customer
        type: string
    required:
    - email
    - password
    type: object
  dto.UpdateCartItemRequest:
    properties:
      quantity:
        minimum: 0
        type: integer
    required:
    - quantity
    type: object
  dto.UpdateMenuRequest:
    properties:
      category:
        maxLength: 100
        minLength: 2
        type: string
      description:
        type: string
      image_url:
        type: string
      name:
        maxLength: 255
        minLength: 2
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - category
    - name
    - price
    type: object
  dto.UpdateOrderStatusRequest:
    properties:
      status:
        allOf:
        - $ref: '#/definitions/entities.OrderStatus'
        enum:
        - pending
        - confirmed
        - preparing
        - ready
        - delivered
        - cancelled
    required:
    - status
    type: object
  dto.UpdateProfileRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  entities.OrderStatus:
    enum:
    - pending
    - confirmed
    - preparing
    - ready
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusConfirmed
    - StatusPreparing
    - StatusReady
    - StatusDelivered
    - StatusCancelled
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a Shopify-like application API
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Shopify App API
  version: "1.0"
paths:
  /api/admin/menus:
    post:
      consumes:
      - application/json
      description: Create a new menu item (Admin only)
      parameters:
      - description: Menu item details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Menu item created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Create a new menu item
      tags:
      - Menu
  /api/admin/menus/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a menu item (Admin only)
      parameters:
      - description: Menu item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu item deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Menu item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Delete menu item
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update an existing menu item (Admin only)
      parameters:
      - description: Menu item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated menu item details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Menu item updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Menu item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update menu item
      tags:
      - Menu
  /api/admin/orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order (Admin only)
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: New order status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update order status
      tags:
      - Order
  /api/admin/reports/best-selling:
    get:
      consumes:
      - application/json
      description: Get a report of best selling menu items for a specified date range
        (Admin only)
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      - default: 5
        description: Number of items to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Best selling items report generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid date format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get best selling items report
      tags:
      - Report
  /api/admin/reports/sales:
    get:
      consumes:
      - application/json
      description: Generate sales report for a specified date range (Admin only)
      parameters:
      - description: Start date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      - description: 'Group by: daily, weekly, monthly'
        in: query
        name: group_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sales report generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid date format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden - Admin access required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Generate sales report
      tags:
      - Report
  /api/cart:
    get:
      consumes:
      - application/json
      description: Get the current user's cart with items and total
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user cart
      tags:
      - Cart
    post:
      consumes:
      - application/json
      description: Add a menu item to the user's cart
      parameters:
      - description: Cart item details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Add item to cart
      tags:
      - Cart
  /api/cart/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific item from the user's cart
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: Cart item removed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Remove item from cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update the quantity of a specific cart item
      parameters:
      - description: Cart item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated quantity
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update cart item quantity
      tags:
      - Cart
  /api/cart/clear:
    delete:
      consumes:
      - application/json
      description: Remove all items from the user's cart
      produces:
      - application/json
      responses:
        "204":
          description: Cart cleared successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Clear user cart
      tags:
      - Cart
  /api/menus:
    get:
      consumes:
      - application/json
      description: Get a list of menu items with optional filtering
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      - description: Search term
        in: query
        name: search
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      - default: true
        description: Show only active items
        in: query
        name: active_only
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Menu items retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get all menu items
      tags:
      - Menu
  /api/menus/{id}:
    get:
      consumes:
      - application/json
      description: Get a specific menu item by its ID
      parameters:
      - description: Menu item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Menu item retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Menu item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get menu item by ID
      tags:
      - Menu
  /api/orders:
    get:
      consumes:
      - application/json
      description: Get the order history for the authenticated user with pagination
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order history retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user order history
      tags:
      - Order
  /api/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order details retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Invalid ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get order details
      tags:
      - Order
  /api/orders/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel a pending order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Order cannot be cancelled
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Cancel order
      tags:
      - Order
  /api/orders/checkout:
    post:
      consumes:
      - application/json
      description: Create an order from the user's cart items
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Cart is empty or invalid
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Checkout cart
      tags:
      - Order
  /api/user/change-password:
    post:
      consumes:
      - application/json
      description: Change the password of the authenticated user
      parameters:
      - description: Password change details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Change user password
      tags:
      - User
  /api/user/profile:
    get:
      consumes:
      - application/json
      description: Get the profile of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User profile
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get user profile
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update the profile of the authenticated user
      parameters:
      - description: Profile update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Update user profile
      tags:
      - User
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User registration successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Authentication
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
